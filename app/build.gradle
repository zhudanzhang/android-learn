// plugins 用于声明应用的插件
// 一般有两种值可选：com.android.application表示这是一个应用程序模块，com.android.library表示这是一个库模块。
// 应用程序模块和库模块的最大区别在于，一个是可以直接运行的，一个只能作为代码库依附于别的应用程序模块来运行
plugins {
    id 'com.android.application'
}

// Android构建配置
// SDK 平台版本说明 https://developer.android.com/studio/releases/platforms?hl=zh-cn
android {
    compileSdkVersion 30 // compileSdkVersion 指定应用编译时使用的 Android API 级别
    buildToolsVersion "30.0.0" // buildToolsVersion 用于指定应用编译时使用的构建工具版本的配置项 这个版本对应于 Android API 中的 Build Tools

    defaultConfig { // 对项目的更多细节进行配置
        applicationId "com.example.helloworld" // 指定应用程序的包名
        minSdkVersion 21 // minSdkVersion用于指定项目最低兼容的Android API 级别
        targetSdkVersion 30 // targetSdkVersion 用于指定应用目标运行的 Android API 级别。该设置告诉系统应用是为哪个 API 级别设计的，以确保在新版本的 Android 上运行时，系统会以向后兼容的方式对待应用
        // 比如说Android 6.0系统中引入了运行时权限这个功能，如果你将targetSdkVersion指定成23或者更高，那么系统就会为你的程序启用运行时权限功能，而如果你将targetSdkVersion指定成22，那么就说明你的程序最高只在Android 5.1系统上做过充分的测试，Android 6.0系统中引入的新功能自然就不会启用了
        versionCode 1 // versionCode用于指定项目的版本号
        versionName "1.0" // versionName用于指定项目的版本名

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner" // 指定测试运行器 用于运行基于 JUnit 的 Android 测试
    }
    // 用于指定生成安装文件的相关配置
    // 通常只会有两个子闭包，一个是debug，一个是release。debug闭包用于指定生成测试版安装文件的配置，release闭包用于指定生成正式版安装文件的配置
    // 通过Android Studio直接运行项目生成的都是测试版安装文件
    buildTypes {
        // release 构建类型启用了代码混淆（minifyEnabled true），使用了 ProGuard 进行代码混淆，并配置了签名（signingConfig signingConfigs.release）
        release {
            // minifyEnabled 用于指定是否对项目的代码进行混淆
            minifyEnabled false
            // proguardFiles用于指定混淆时使用的规则文件
            // 第一个proguard-android.txt是在Android SDK目录下的，里面是所有项目通用的混淆规则，第二个proguard-rules.pro是在当前项目的根目录下的，里面可以编写当前项目特有的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // 用于配置 Java 编译选项
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8 // 指定应用源代码的 Java 版本
        targetCompatibility JavaVersion.VERSION_1_8 // 指定编译生成的字节码的目标 Java 版本
    }
}

// 项目依赖项 指定当前项目所有的依赖关系
// 本地依赖可以对本地的Jar包或目录添加依赖关系，库依赖可以对项目中的库模块添加依赖关系，远程依赖则可以对jcenter库上的开源项目添加依赖关系
dependencies {
    // implementation 是依赖关系配置的关键字，用于指定项目的依赖项
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // testImplementation  只在测试代码中可见，不会包含在应用的主要代码中
    testImplementation 'junit:junit:4.+'
    // androidTestImplementation 只在仪器测试代码中可见
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}